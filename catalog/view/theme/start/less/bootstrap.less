@import (reference) "elements";
@import (reference) "variables";
/*--------------------------------------------
Grid Framework
----------------------------------------------*/
// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `@grid-columns`.

.make-grid-columns() {
   // Common styles for all sizes of grid columns, widths 1-12
   .col(@index) when (@index = 1) { // initial
      @item: ~".col-xs-@{index}, .col-sm-@{index}, .col-md-@{index}, .col-lg-@{index}";
      .col((@index + 1), @item);
   }
   .col(@index, @list) when (@index =< @grid-columns) { // general; "=<" isn't a typo
      @item: ~".col-xs-@{index}, .col-sm-@{index}, .col-md-@{index}, .col-lg-@{index}";
      .col((@index + 1), ~"@{list}, @{item}");
   }
   .col(@index, @list) when (@index > @grid-columns) { // terminal
      @{list} {
         position: relative;
         // Prevent columns from collapsing when empty
         min-height: 1px;
         // Inner gutter via padding
         padding-left:  (@grid-gutter-width / 2);
         padding-right: (@grid-gutter-width / 2);
      }
   }
   .col(1); // kickstart it
}

.float-grid-columns(@class) {
   .col(@index) when (@index = 1) { // initial
      @item: ~".col-@{class}-@{index}";
      .col((@index + 1), @item);
   }
   .col(@index, @list) when (@index =< @grid-columns) { // general
      @item: ~".col-@{class}-@{index}";
      .col((@index + 1), ~"@{list}, @{item}");
   }
   .col(@index, @list) when (@index > @grid-columns) { // terminal
      @{list} {
         float: left;
      }
   }
   .col(1); // kickstart it
}

.calc-grid-column(@index, @class, @type) when (@type = width) and (@index > 0) {
   .col-@{class}-@{index} {
      width: percentage((@index / @grid-columns));
   }
}
.calc-grid-column(@index, @class, @type) when (@type = push) and (@index > 0) {
   .col-@{class}-push-@{index} {
      left: percentage((@index / @grid-columns));
   }
}
.calc-grid-column(@index, @class, @type) when (@type = push) and (@index = 0) {
   .col-@{class}-push-0 {
      left: auto;
   }
}
.calc-grid-column(@index, @class, @type) when (@type = pull) and (@index > 0) {
   .col-@{class}-pull-@{index} {
      right: percentage((@index / @grid-columns));
   }
}
.calc-grid-column(@index, @class, @type) when (@type = pull) and (@index = 0) {
   .col-@{class}-pull-0 {
      right: auto;
   }
}
.calc-grid-column(@index, @class, @type) when (@type = offset) {
   .col-@{class}-offset-@{index} {
      margin-left: percentage((@index / @grid-columns));
   }
}

// Basic looping in LESS
.loop-grid-columns(@index, @class, @type) when (@index >= 0) {
   .calc-grid-column(@index, @class, @type);
   // next iteration
   .loop-grid-columns((@index - 1), @class, @type);
}

// Create grid for specific class
.make-grid(@class) {
   .float-grid-columns(@class);
   .loop-grid-columns(@grid-columns, @class, width);
   .loop-grid-columns(@grid-columns, @class, pull);
   .loop-grid-columns(@grid-columns, @class, push);
   .loop-grid-columns(@grid-columns, @class, offset);
}
// Grid system
//
// Generate semantic grid columns with these mixins.

// Centered container element
.container-fixed() {
   margin-right: auto;
   margin-left: auto;
   padding-left:  (@grid-gutter-width / 2);
   padding-right: (@grid-gutter-width / 2);
   &:extend(.clearfix all);
}

// Creates a container for a series of columns
.make-row(@gutter: @grid-gutter-width) {
   margin-left:  (@gutter / -2);
   margin-right: (@gutter / -2);
   &:extend(.clearfix all);
}

// Generate the extra small columns
.make-xs-column(@columns; @gutter: @grid-gutter-width) {
   position: relative;
   float: left;
   width: percentage((@columns / @grid-columns));
   min-height: 1px;
   padding-left:  (@gutter / 2);
   padding-right: (@gutter / 2);
}
.make-xs-column-offset(@columns) {
   margin-left: percentage((@columns / @grid-columns));
}
.make-xs-column-push(@columns) {
   left: percentage((@columns / @grid-columns));
}
.make-xs-column-pull(@columns) {
   right: percentage((@columns / @grid-columns));
}

// Generate the small columns
.make-sm-column(@columns; @gutter: @grid-gutter-width) {
   position: relative;
   min-height: 1px;
   padding-left:  (@gutter / 2);
   padding-right: (@gutter / 2);

   @media (min-width: @screen-sm-min) {
      float: left;
      width: percentage((@columns / @grid-columns));
   }
}
.make-sm-column-offset(@columns) {
   @media (min-width: @screen-sm-min) {
      margin-left: percentage((@columns / @grid-columns));
   }
}
.make-sm-column-push(@columns) {
   @media (min-width: @screen-sm-min) {
      left: percentage((@columns / @grid-columns));
   }
}
.make-sm-column-pull(@columns) {
   @media (min-width: @screen-sm-min) {
      right: percentage((@columns / @grid-columns));
   }
}

// Generate the medium columns
.make-md-column(@columns; @gutter: @grid-gutter-width) {
   position: relative;
   min-height: 1px;
   padding-left:  (@gutter / 2);
   padding-right: (@gutter / 2);

   @media (min-width: @screen-md-min) {
      float: left;
      width: percentage((@columns / @grid-columns));
   }
}
.make-md-column-offset(@columns) {
   @media (min-width: @screen-md-min) {
      margin-left: percentage((@columns / @grid-columns));
   }
}
.make-md-column-push(@columns) {
   @media (min-width: @screen-md-min) {
      left: percentage((@columns / @grid-columns));
   }
}
.make-md-column-pull(@columns) {
   @media (min-width: @screen-md-min) {
      right: percentage((@columns / @grid-columns));
   }
}

// Generate the large columns
.make-lg-column(@columns; @gutter: @grid-gutter-width) {
   position: relative;
   min-height: 1px;
   padding-left:  (@gutter / 2);
   padding-right: (@gutter / 2);

   @media (min-width: @screen-lg-min) {
      float: left;
      width: percentage((@columns / @grid-columns));
   }
}
.make-lg-column-offset(@columns) {
   @media (min-width: @screen-lg-min) {
      margin-left: percentage((@columns / @grid-columns));
   }
}
.make-lg-column-push(@columns) {
   @media (min-width: @screen-lg-min) {
      left: percentage((@columns / @grid-columns));
   }
}
.make-lg-column-pull(@columns) {
   @media (min-width: @screen-lg-min) {
      right: percentage((@columns / @grid-columns));
   }
}
//
// Grid system
// --------------------------------------------------


// Container widths
//
// Set the container width, and override it for fixed navbars in media queries.

.row,.container{
   .clearfix;
}
.container {
   .center-block;
   padding-left:  (@grid-gutter-width / 2);
   padding-right: (@grid-gutter-width / 2);
}


// Fluid container
//
// Utilizes the mixin meant for fixed width containers, but without any defined
// width for fluid, full width layouts.

.container-fluid {
   .container-fixed();
}


// Row
//
// Rows contain and clear the floats of your columns.

.row {
   .make-row();
}

// Columns
//
// Common styles for small and large grid columns

.make-grid-columns();


// Extra small grid
//
// Columns, offsets, pushes, and pulls for extra small devices like
// smartphones.

.make-grid(xs);


// Small grid
//
// Columns, offsets, pushes, and pulls for the small device range, from phones
// to tablets.

@media (min-width: @screen-sm-min) {
   .make-grid(sm);
}


// Medium grid
//
// Columns, offsets, pushes, and pulls for the desktop device range.

@media (min-width: @screen-md-min) {
   .make-grid(md);
}


// Large grid
//
// Columns, offsets, pushes, and pulls for the large desktop device range.

@media (min-width: @screen-lg-min) {
   .make-grid(lg);
}
@media (max-width: 767px) {
   .hidden-xs {
      display: none !important;
   }
}
@media (min-width: 768px) and (max-width: 991px) {
   .hidden-sm {
      display: none !important;
   }
}
@media (min-width: 992px) and (max-width: 1199px) {
   .hidden-md {
      display: none !important;
   }
}
@media (min-width: 1200px) {
   .hidden-lg {
      display: none !important;
   }
}
.pull-right {
   float: right !important;
}
.pull-left {
   float: left !important;
}

// Tables
// --------------------------------------------------

table {
   max-width: 100%;
   background-color: @table-bg;
}
th {
   text-align: left;
}


// Baseline styles

.table {
   width: 100%;
   margin-bottom: @line-height-computed;
   // Cells
   > thead,
   > tbody,
   > tfoot {
      > tr {
         > th,
         > td {
            padding: @table-cell-padding;
            line-height: @line-height-base;
            vertical-align: middle;
            border-top: 1px solid @table-border-color;
         }
      }
   }
   // Bottom align for column headings
   > thead > tr > th {
      vertical-align: bottom;
      border-bottom: 2px solid @table-border-color;
   }
   // Remove top border from thead by default
   > caption + thead,
   > colgroup + thead,
   > thead:first-child {
      > tr:first-child {
         > th,
         > td {
            border-top: 0;
         }
      }
   }
   // Account for multiple tbody instances
   > tbody + tbody {
      border-top: 2px solid @table-border-color;
   }

   // Nesting
   .table {
      background-color: @body-bg;
   }
}


// Condensed table w/ half padding

.table-condensed {
   > thead,
   > tbody,
   > tfoot {
      > tr {
         > th,
         > td {
            padding: @table-condensed-cell-padding;
         }
      }
   }
}


// Bordered version
//
// Add borders all around the table and between all the columns.

.table-bordered {
   border: 1px solid @table-border-color;
   > thead,
   > tbody,
   > tfoot {
      > tr {
         > th,
         > td {
            border: 1px solid @table-border-color;
         }
      }
   }
   > thead > tr {
      > th,
      > td {
         border-bottom-width: 2px;
      }
   }
}


// Zebra-striping
//
// Default zebra-stripe styles (alternating gray and transparent backgrounds)

.table-striped {
   > tbody > tr:nth-child(odd) {
      > td,
      > th {
         background-color: @table-bg-accent;
      }
   }
}


// Hover effect
//
// Placed here since it has to come after the potential zebra striping

.table-hover {
   > tbody > tr:hover {
      > td,
      > th {
         background-color: @table-bg-hover;
      }
   }
}


// Table cell sizing
//
// Reset default table behavior

table col[class*="col-"] {
   position: static; // Prevent border hiding in Firefox and IE9/10 (see https://github.com/twbs/bootstrap/issues/11623)
   float: none;
   display: table-column;
}
table {
   td,
   th {
      &[class*="col-"] {
         position: static; // Prevent border hiding in Firefox and IE9/10 (see https://github.com/twbs/bootstrap/issues/11623)
         float: none;
         display: table-cell;
      }
   }
}

// Tables
// -------------------------
.table-row-variant(@state; @background) {
// Exact selectors below required to override `.table-striped` and prevent
// inheritance to nested tables.
.table > thead > tr,
.table > tbody > tr,
.table > tfoot > tr {
   > td.@{state},
   > th.@{state},
   &.@{state} > td,
   &.@{state} > th {
      background-color: @background;
   }
}

// Hover states for `.table-hover`
// Note: this is not available for cells or rows within `thead` or `tfoot`.
.table-hover > tbody > tr {
   > td.@{state}:hover,
   > th.@{state}:hover,
   &.@{state}:hover > td,
   &.@{state}:hover > th {
      background-color: darken(@background, 5%);
   }
}
}
// Table backgrounds
//
// Exact selectors below required to override `.table-striped` and prevent
// inheritance to nested tables.

// Generate the contextual variants
.table-row-variant(active; @table-bg-active);
.table-row-variant(success; @state-success-bg);
.table-row-variant(info; @state-info-bg);
.table-row-variant(warning; @state-warning-bg);
.table-row-variant(danger; @state-danger-bg);


// Responsive tables
//
// Wrap your tables in `.table-responsive` and we'll make them mobile friendly
// by enabling horizontal scrolling. Only applies <768px. Everything above that
// will display normally.

@media (max-width: @screen-xs-max) {
   .table-responsive {
      width: 100%;
      margin-bottom: (@line-height-computed * 0.75);
      overflow-y: hidden;
      overflow-x: scroll;
      -ms-overflow-style: -ms-autohiding-scrollbar;
      -webkit-overflow-scrolling: touch;

      // Tighten up spacing
      > .table {
         margin-bottom: 0;

         // Ensure the content doesn't wrap
         > thead,
         > tbody,
         > tfoot {
            > tr {
               > th,
               > td {
                  white-space: nowrap;
               }
            }
         }
      }

      // Special overrides for the bordered tables
      > .table-bordered {
         border: 0;

         // Nuke the appropriate borders so that the parent can handle them
         > thead,
         > tbody,
         > tfoot {
            > tr {
               > th:first-child,
               > td:first-child {
                  border-left: 0;
               }
               > th:last-child,
               > td:last-child {
                  border-right: 0;
               }
            }
         }

         // Only nuke the last row's bottom-border in `tbody` and `tfoot` since
         // chances are there will be only one `tr` in a `thead` and that would
         // remove the border altogether.
         > tbody,
         > tfoot {
            > tr:last-child {
               > th,
               > td {
                  border-bottom: 0;
               }
            }
         }

      }
   }
}